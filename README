* Make a branch before making a feature (git branch branchname)
* If the feature works, ask partner to check before merging to master (git checkout master && git merge branchname)
* Commit everytime something works (git commit -m "message")
* Always push to branchname (git push origin branchname) 
*** If you didn't call the remote repository origin, replace "origin" with what you called it, note that it's custom to call it "origin"
* Change to branchname: (git checkout branchname)
* Get the current copy and wipe out your own copy: (git pull branchname)


* ALWAYS git pull before beginning work, so that your files are up-to-date.

OK, I did some thought.  Here's my idea on the classes:

interface Damageable: takeDamage(int), die()
class Alien implements Damageable: move(), fire()
class Saucer extends Alien implements Damageable: move(), fire() /*never used, or empty*/
class Ship implements Damageable: moveLeft(), moveRight(), fire()
class Shield implements Damageable: /* automatically die() */
